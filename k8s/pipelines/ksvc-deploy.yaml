apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ksvc-deploy
  labels:
    pipeline.openshift.io/runtime: java
    pipeline.openshift.io/type: knative
spec:
  description: >-
    The Pipline to build and deploy the Hybrid Cloud Demo Java App https://github.com/redhat-developer-demos/hybrid-cloud as Knative Service.
  params:
    - name: GITHUB_REPO_URL
      description: >-
        The GitHub Repo of the Java Application
      default: https://github.com/redhat-developer-demos/hybrid-cloud
    - name: GITHUB_REPO_REVISION
      description: >-
        The GitHub revision to use
      default: knative
    - name: IMAGE_NAME
      description: >-
        The fully qualified image name e.g example.com/tekton-tutorial/helloworld
      default: image-registry.openshift-image-registry.svc:5000/hybrid-cloud-demo/hybrid-cloud-demo
    - name: SERVICE
      description: >-
        The service  for the application allowed values "backend" or "prime-generator" or "frontend"
    - name: APP_NAME
      description: >-
        The Knative Service Name
    - name: SERVICE_NAMESPACE
      description: >-
        The Knative Service Namespace
      default: hybrid-cloud-demo
    - name: KN_CONCURRENCY_LIMIT
      description: >-
        The maximum number of concurrent requests to allow per service pod
      default: "1"
    - name: KN_MAX_SCALE
      description: >-
        The maximum number of pods the service scale upto. Defaults to 0, which means unlimited.
      default: "0"
  workspaces:
    - name: source
    - name: maven-settings
  tasks:
    - name: clone-sources
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: $(params.GITHUB_REPO_URL)
        - name: revision
          value: $(params.GITHUB_REPO_REVISION)
        # just to do a fresh clone, as we already have the directory cloned
        # to reuse it we can exlude this step
        - name: deleteExisting
          value: "true"
      workspaces:
        - name: output
          workspace: source
    - name: maven-test
      taskRef:
        name: maven
        kind: ClusterTask
      runAfter:
        - clone-sources
      params:
        - name: GOALS
          value: ["-pl", "$(params.SERVICE)", "-B", "clean", "test"]
      workspaces:
        - name: maven-settings
          workspace: maven-settings
        - name: source
          workspace: source
    - name: maven-package
      taskRef:
        name: maven
        kind: ClusterTask
      runAfter:
        - maven-test
      params:
        - name: GOALS
          value:
            [
              "-pl",
              "$(params.SERVICE)",
              "-B",
              "-DskipTests",
              "clean",
              "package",
            ]
      workspaces:
        - name: maven-settings
          workspace: maven-settings
        - name: source
          workspace: source
    - name: buildah-build-push
      taskRef:
        name: buildah
        kind: ClusterTask
      runAfter:
        - maven-package
      params:
        - name: CONTEXT
          value: "$(params.SERVICE)"
        - name: DOCKERFILE
          value: "$(params.SERVICE)/Dockerfile"
        - name: IMAGE
          value: "$(params.IMAGE_NAME)-$(params.SERVICE)"
        # since pushing to internal registry we skip TLS verify
        - name: TLSVERIFY
          value: "false"
      workspaces:
        - name: source
          workspace: source
    - name: query-cloud-provider
      taskRef:
        name: cloud-identifier
      runAfter:
        - buildah-build-push
    - name: deploy-kn-service
      taskRef:
        name: kn
        kind: ClusterTask
      runAfter:
        - query-cloud-provider
      params:
        - name: ARGS
          value:
            - service
            - create
            - $(params.APP_NAME)
            - --force
            - --image=$(params.IMAGE_NAME)-$(params.SERVICE)@$(tasks.buildah-build-push.results.IMAGE_DIGEST)
            - --concurrency-limit=$(params.KN_CONCURRENCY_LIMIT)
            - --max-scale=$(params.KN_MAX_SCALE)
            - --label=app.kubernetes.io/part-of=hybrid-cloud-demo
            - --env=WORKER_CLOUD_ID=$(tasks.query-cloud-provider.results.CLOUD_PROVIDER)
    - name: skupperize-kn-service
      taskRef:
        name: kn-skupper-service
      runAfter:
        - deploy-kn-service
      params:
        - name: SCRIPT
          value: |
            #!/usr/bin/env bash
            set -e
            cat <<EOF | oc replace -n "$(params.SERVICE_NAMESPACE)" -f -
              apiVersion: v1
              kind: Service
              metadata:
                annotations:
                  skupper.io/proxy: http
                  skupper.io/target: "$(params.APP_NAME).$(params.SERVICE_NAMESPACE)"
                name: "$(params.APP_NAME)-skupper"
              spec:
                ports:
                - name: http
                  port: 80
                type: LoadBalancer
            EOF
