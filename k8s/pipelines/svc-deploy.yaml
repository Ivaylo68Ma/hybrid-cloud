apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: svc-deploy
  labels:
    pipeline.openshift.io/runtime: java
    #pipeline.openshift.io/type: knative
spec:
  description: >-
    The Pipline to build and deploy the Hybrid Cloud Demo Java App https://github.com/redhat-developer-demos/hybrid-cloud as a Kubernetes Service.
  params:
    - name: GITHUB_REPO_URL
      description: >-
        The GitHub Repo of the Java Application
      default: https://github.com/redhat-developer-demos/hybrid-cloud
    - name: GITHUB_REPO_REVISION
      description: >-
        The GitHub revision to use
      default: knative
    - name: IMAGE_NAME
      description: >-
        The fully qualified image name e.g example.com/tekton-tutorial/helloworld
      default: image-registry.openshift-image-registry.svc:5000/hybrid-cloud-demo/hybrid-cloud-demo
    - name: SERVICE_TIER
      description: >-
        The service tier for the application allowed values "backend" or "frontend"
    - name: APP_NAME
      description: >-
        The Service Name
    - name: SERVICE_NAMESPACE
      description: >-
        The Service Namespace
      default: hybrid-cloud-demo
  workspaces:
    - name: source
    - name: maven-settings
  tasks:
    - name: clone-sources
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: $(params.GITHUB_REPO_URL)
        - name: revision
          value: $(params.GITHUB_REPO_REVISION)
        # just to do a fresh clone, as we already have the directory cloned
        # to reuse it we can exlude this step
        - name: deleteExisting
          value: "true"
      workspaces:
        - name: output
          workspace: source
    - name: maven-test
      taskRef:
        name: maven
        kind: ClusterTask
      runAfter:
        - clone-sources
      params:
        - name: GOALS
          value: ["-pl", "$(params.SERVICE_TIER)", "-B", "clean", "test"]
      workspaces:
        - name: maven-settings
          workspace: maven-settings
        - name: source
          workspace: source
    - name: maven-package
      taskRef:
        name: maven
        kind: ClusterTask
      runAfter:
        - maven-test
      params:
        - name: GOALS
          value:
            [
              "-pl",
              "$(params.SERVICE_TIER)",
              "-B",
              "-DskipTests",
              "clean",
              "package",
            ]
      workspaces:
        - name: maven-settings
          workspace: maven-settings
        - name: source
          workspace: source
    - name: buildah-build-push
      taskRef:
        name: buildah
        kind: ClusterTask
      runAfter:
        - maven-package
      params:
        - name: CONTEXT
          value: "$(params.SERVICE_TIER)"
        - name: DOCKERFILE
          value: "$(params.SERVICE_TIER)/Dockerfile"
        - name: IMAGE
          value: "$(params.IMAGE_NAME)-$(params.SERVICE_TIER)"
        # since pushing to internal registry we skip TLS verify
        - name: TLSVERIFY
          value: "false"
      workspaces:
        - name: source
          workspace: source
    - name: query-cloud-provider
      taskRef:
        name: cloud-identifier
      runAfter:
        - buildah-build-push
    - name: deploy-kubernetes-app
      taskRef:
        name: openshift-cli-deploy
      runAfter:
        - query-cloud-provider
      workspaces:
        - name: source
          workspace: source
      params:
        - name: SCRIPT
          value: |
            #!/usr/bin/env bash
            set -e

            # Create the Deployment

            yq w "$(workspaces.source.path)/k8s/$(params.CONTEXT_DIR)/deployment.yaml" \
              'spec.template.spec.containers[0].image' '$(params.IMAGE_NAME)' \
              | oc replace -n $(params.SERVICE_NAMESPACE) -f -

            oc set env "deployment/$(params.APP_NAME)" "WORKER_CLOUD_ID=$(params.WORKER_CLOUD_ID) "

            # Create the Service 
            yq w "$(workspaces.source.path)/k8s/$(params.CONTEXT_DIR)/service.yaml" metadata.name "$(params.APP_NAME)" \
            | yq w "$(workspaces.source.path)/k8s/$(params.CONTEXT_DIR)/service.yaml" spec.selector.app "$(params.APP_NAME)" \
            | oc replace -n "$(params.SERVICE_NAMESPACE)" -f -

            # Create the Route
            oc create route edge -n "$(params.SERVICE_NAMESPACE)" "$(params.APP_NAME)" --service="$(params.APP_NAME)" --port="http" --insecure-policy="passthrough"

            # if its frontend create the skupper token, ideally we can create from # any site 
            if [ "$(params.CONTEXT_DIR)" == "frontend" ];
            then
              oc replace secret generic -n "$(params.SERVICE_NAMESPACE)" site-token || true
              oc label secret/site-token skupper.io/type=connection-token-request
            fi
